# main.py
# File ch√≠nh c·ªßa ·ª©ng d·ª•ng FastAPI
import os
import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

# Import c√°c module c·ªßa ·ª©ng d·ª•ng
from backend.database.cosmos import connect_cosmos, close_cosmos
from backend.routes.qa_generation import qa_generation
from backend.routes.article_generation import article_generation
from backend.routes.qa import qas
from backend.routes.qa_result import qas_result
from backend.routes.news import news
from backend.service.scheduler_service import start_scheduler, stop_scheduler


# Lifecycle manager - qu·∫£n l√Ω kh·ªüi t·∫°o v√† ƒë√≥ng k·∫øt n·ªëi
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup: K·∫øt n·ªëi database khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
    print("üöÄ Starting Question App...")
    await connect_cosmos()
    
    # Start the news scheduler
    await start_scheduler()
    
    yield
    
    # Shutdown: ƒê√≥ng k·∫øt n·ªëi khi ·ª©ng d·ª•ng t·∫Øt
    print("üõë Shutting down Question App...")
    
    # Stop the news scheduler
    await stop_scheduler()
    
    await close_cosmos()


# T·∫°o FastAPI app v·ªõi lifecycle manager
app = FastAPI(
    title="Question Management API",
    description="API ƒë·ªÉ qu·∫£n l√Ω c√¢u h·ªèi s·ª≠ d·ª•ng Azure Cosmos DB",
    version="1.0.0",
    lifespan=lifespan
)

FRONTEND_URL = os.getenv("FRONTEND_URL", "*").split(",")

# C·∫•u h√¨nh CORS (Cross-Origin Resource Sharing)
# Cho ph√©p frontend t·ª´ domain kh√°c g·ªçi API
app.add_middleware(
    CORSMiddleware,
    allow_origins=FRONTEND_URL,  # Frontend URLs
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

# ƒêƒÉng k√Ω routes
app.include_router(qas)
app.include_router(qa_generation)
app.include_router(article_generation)
app.include_router(qas_result)
app.include_router(news)


# Health check endpoint
@app.get("/health")
async def health_check():
    """Endpoint ki·ªÉm tra s·ª©c kh·ªèe ·ª©ng d·ª•ng"""
    return {"status": "healthy", "message": "Question App is running"}



# Ch·∫°y ·ª©ng d·ª•ng (ch·ªâ khi ch·∫°y tr·ª±c ti·∫øp file n√†y)
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,  # Auto-reload khi code thay ƒë·ªïi (ch·ªâ d√πng trong development)
        log_level="info"
    )